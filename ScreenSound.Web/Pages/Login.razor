@page "/login"
@inject AuthAPI authAPI
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@attribute [AllowAnonymous]


<MudPaper Class="px-8 pt-2 pb-4 mx-16 my-8" Justify="Justify.Center">

    <AuthorizeView>
        <Authorized>
            <p>Você está conectado como @context.User.Identity!.Name</p>
        </Authorized>
        <NotAuthorized>
            <MudForm>

                <MudTextField T="string" Label="Email" @bind-Value="Email"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Email obrigatório!"
                              OnlyValidateIfDirty="true" />

                <MudTextField T="string" Label="Senha" @bind-Value="Senha"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Senha obrigatória!"
                              OnlyValidateIfDirty="true" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           Class="my-6" @onclick="FazerLogin">
                    Login
                </MudButton>

            </MudForm>
        </NotAuthorized>

    </AuthorizeView>

</MudPaper>

@code {
    private string? Email;
    private string? Senha;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task FazerLogin()
    {
        try
        {
            var resposta = await authAPI.LoginAsync(Email!, Senha!);
            if (resposta.Sucesso)
            {
                if (ReturnUrl is not null) {
                navigationManager.NavigateTo(ReturnUrl);
            }
            }
            Snackbar.Add("Login realizado com sucesso!", Severity.Success);
        }
		catch (Exception ex)
		{
			Snackbar.Add(ex.Message, Severity.Error);
			return;
        }
	}
}
