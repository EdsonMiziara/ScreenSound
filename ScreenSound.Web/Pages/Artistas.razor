@page "/Artistas"
@inject ArtistaAPI artistaAPI


<MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.SpaceBetween">
	<MudText Class="mb-4" Typo="Typo.h4">Artistas cadastrados</MudText>
	<MudPagination Count="@totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
</MudStack>


@if (artistasPorPagina == null)
{
	<p>❌ A lista de artistas está nula.</p>
}
else if (!artistasPorPagina.Any())
{
	<p>⚠️ Nenhum artista encontrado.</p>
}
else if (artistasPorPagina is not null)
{
	<p>✅ Total de artistas: @artistasPorPagina.Count</p>
	<MudGrid>
		@foreach (var artista in artistasPorPagina)
		{
			<MudItem xs="3">
				<CardArtista Artista ="artista" />
			</MudItem>
		}
	</MudGrid>
}

@code {
	private ICollection<ArtistaResponse>? artistas;
	private ICollection<ArtistaResponse>? artistasPorPagina;
	private int tamanho = 8;
	private int totalItens;
	private int totalPaginas;

	protected override async Task OnInitializedAsync()
	{
		artistas = await artistaAPI.GetArtistasAsync();
		if (artistas is not null)
		{
			artistas = artistas.OrderByDescending(a => a.Id).ToList();
			totalItens = artistas.Count();
			totalPaginas = Convert.ToInt32(Math.Ceiling((double)totalItens / tamanho));
			this.PaginaMudou(1);
		}

	}

	private void PaginaMudou(int pageNumber)
	{
		var indice = pageNumber - 1;
		artistasPorPagina = artistas!.Skip(indice * tamanho).Take(tamanho).ToList();

	}


}
